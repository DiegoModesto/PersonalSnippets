//https://snippet-generator.app
{
	"Inject modules to NetSuite": {
		"prefix": "nsInject",
		"body": [
			"var record = null, search = null, query = null, format = null, http = null, https = null, runtime = null; urlmod = null",
			"require(['N/record', 'N/search', 'N/query', 'N/format', 'N/http', 'N/https', 'N/runtime', 'N/url'], (a,b,c,d,e,f,g,h) => {",
			"    record = a;",
			"    search = b;",
			"    query = c;",
			"    format = d;",
			"    http = e;",
			"    https = f;",
			"    runtime = g;",
			"    urlmod = h;",
			"})"
		]
	},
	"Import Custom": {
		"scope": "typescript",
		"prefix": "tsImportCustom",
		"body": [
			"import * as NAME from 'PATH'"
		]
	},
	"Import Search": {
		"scope": "typescript",
		"prefix": "tsImportSearch",
		"body": [
			"import * as search from 'N/search'"
		]
	},
	"Import Record": {
		"scope": "typescript",
		"prefix": "tsImportRecord",
		"body": [
			"import * as record from 'N/record'"
		]
	},
	"Import Query": {
		"scope": "typescript",
		"prefix": "tsImportQuery",
		"body": [
			"import * as query from 'N/query'"
		]
	},
	"Import File": {
		"scope": "typescript",
		"prefix": "tsImportQuery",
		"body": [
			"import * as file from 'N/file'"
		]
	},
	"Import HTTPS": {
		"scope": "typescript",
		"prefix": "tsImportHttps",
		"body": [
			"import * as https from 'N/https'"
		]
	},
	"Import HTTP": {
		"scope": "typescript",
		"prefix": "tsImportHttp",
		"body": [
			"import * as http from 'N/http'"
		]
	},
	"Interface NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsInterface",
		"body": [
			"export interface IInterfaceName {",
			"  ",
			"}"
		]
	},
	"M칩dulo B치sico NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsModule",
		"body": [
			"export function execute() : void => {}"
		]
	},
	"M칩dulo B치sico NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsModule",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" */",
			" define([], function () {",
			" ",
			"      function execute() {}",
			"",
			"      return {",
			"            execute",
			"      }",
			"})"
		]
	},
	"ScheduleScript NetSuite - Javascript": {
		"scope": "javascript",
		"prefix": "nsSchedule",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType ScheduledScript",
			" */",
			"define([], function() {",
			"",
			"    function execute () { }",
			"",
			"    return {",
			"        execute",
			"    }",
			"})"
		]
	},
	"ScheduleScript NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsSchedule",
		"body": [
			"/**",
			"*@NApiVersion 2.1",
			"*@NScriptType ScheduledScript",
			"*/",
			"",
			"import { EntryPoints } from 'N/types'",
			"import { debug, audit, error } from 'N/log'",
			"",
			"type execute = EntryPoints.ScheduledScript.execute",
			"type executeContext = EntryPoints.ScheduledScript.executeContext",
			"",
			"export let execute: execute = (context: executeContext) => {}"
		]
	},
	"ClientScript NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsClientScript",
		"body": [
			"/**",
			"*@NApiVersion 2.1",
			"*@NScriptType ClientScript",
			"*/",
			"",
			"import { EntryPoints } from 'N/types'",
			"import { debug, audit, error } from 'N/log'",
			"",
			"type pageInit = EntryPoints.Client.pageInit",
			"type pageInitContext = EntryPoints.Client.pageInitContext",
			"type saveRecord = EntryPoints.Client.saveRecord",
			"type saveRecordContext = EntryPoints.Client.saveRecordContext",
			"type validateField = EntryPoints.Client.validateField",
			"type validateFieldContext = EntryPoints.Client.validateFieldContext",
			"type fieldChanged = EntryPoints.Client.fieldChanged",
			"type fieldChangedContext = EntryPoints.Client.fieldChangedContext",
			"type postSourcing = EntryPoints.Client.postSourcing",
			"type postSourcingContext = EntryPoints.Client.postSourcingContext",
			"type lineInit = EntryPoints.Client.lineInit",
			"type lineInitContext = EntryPoints.Client.lineInitContext",
			"type validateDelete = EntryPoints.Client.validateDelete",
			"type validateDeleteContext = EntryPoints.Client.validateDeleteContext",
			"type validateInsert = EntryPoints.Client.validateInsert",
			"type validateInsertContext = EntryPoints.Client.validateInsertContext",
			"type validateLine = EntryPoints.Client.validateLine",
			"type validateLineContext = EntryPoints.Client.validateLineContext",
			"type sublistChanged = EntryPoints.Client.sublistChanged",
			"type sublistChangedContext = EntryPoints.Client.sublistChangedContext",
			"",
			"",
			"export let pageInit: pageInit = (context: pageInitContext) => {}",
			"export let saveRecord: saveRecord = (scriptContext: saveRecordContext) => { return true }",
			"export let validateField: validateField = (context: validateFieldContext) => { return true }",
			"export let fieldChanged: fieldChanged = (context: fieldChangedContext) => {}",
			"export let postSourcing: postSourcing = (context: postSourcingContext) => {}",
			"export let lineInit: lineInit = (context: lineInitContext) => {}",
			"export let validateDelete: validateDelete = (context: validateDeleteContext) => { return true }",
			"export let validateInsert: validateInsert = (context: validateInsertContext) => { return true }",
			"export let validateLine: validateLine = (context: validateLineContext) => { return true }",
			"export let sublistChanged: sublistChanged = (context: sublistChangedContext) => {}"
		]
	},
	"ClientScript NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsClientScript",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType ClientScript",
			" */",
			"define([], function() {",
			"",
			"    function pageInit(context) {}",
			"",
			"    function saveRecord(context) {}",
			"",
			"    function validateField(context) {}",
			"",
			"    function fieldChanged(context) {}",
			"",
			"    function postSourcing(context) {}",
			"",
			"    function lineInit(context) {}",
			"",
			"    function validateDelete(context) {}",
			"",
			"    function validateInsert(context) {}",
			"",
			"    function validateLine(context) {}",
			"",
			"    function sublistChanged(context) {}",
			"",
			"    return {",
			"        pageInit,",
			"        saveRecord,",
			"        validateField,",
			"        fieldChanged,",
			"        postSourcing,",
			"        lineInit,",
			"        validateDelete,",
			"        validateInsert,",
			"        validateLine,",
			"        sublistChanged",
			"    }",
			"})",
			""
		]
	},
	"UserEvent NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsUserEvent",
		"body": [
			"/**",
			"*@NApiVersion 2.1",
			"*@NScriptType UserEventScript",
			"*/",
			"",
			"import { EntryPoints } from 'N/types'",
			"import { debug, audit, error } from 'N/log'",
			"",
			"type beforeLoad = EntryPoints.UserEvent.beforeLoad",
			"type beforeLoadContext = EntryPoints.UserEvent.beforeLoadContext",
			"",
			"type beforeSubmit = EntryPoints.UserEvent.beforeSubmit",
			"type beforeSubmitContext = EntryPoints.UserEvent.beforeSubmitContext",
			"",
			"type afterSubmit = EntryPoints.UserEvent.afterSubmit",
			"type afterSubmitContext = EntryPoints.UserEvent.afterSubmitContext",
			"",
			"export let beforeLoad: beforeLoad = (context: beforeLoadContext) => { }",
			"export let beforeSubmit: beforeSubmit = (context: beforeSubmitContext) => { }",
			"export let afterSubmit: afterSubmit = (context: afterSubmitContext) => { }"
		],
	},
	"UserEvent NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsUserEvent",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType UserEventScript",
			" */",
			"define([], function() {",
			"",
			"    function beforeLoad(context){}",
			"",
			"    function beforeSubmit(context){}",
			"",
			"    function afterSubmit(context){}",
			"",
			"    return {",
			"        beforeLoad,",
			"        beforeSubmit,",
			"        afterSubmit",
			"    }",
			"})",
			""
		]
	},
	"MapReduce NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsMapReduce",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType MapReduceScript",
			" */",
			"",
			" import { EntryPoints } from 'N/types'",
			" import { debug, audit, error } from 'N/log'",
			" ",
			"type getInputData = EntryPoints.MapReduce.getInputData",
			"type getInputDataContext = EntryPoints.MapReduce.getInputDataContext",
			"type map = EntryPoints.MapReduce.map",
			"type mapContext = EntryPoints.MapReduce.mapContext",
			"type reduce = EntryPoints.MapReduce.reduce",
			"type reduceContext = EntryPoints.MapReduce.reduceContext",
			"type summarize = EntryPoints.MapReduce.summarize",
			"type summarizeContext = EntryPoints.MapReduce.summarizeContext",
			"",
			"export let getInputData: getInputData = (context: getInputDataContext) => { }",
			"export let map: map = (context: mapContext) => {}",
			"export let reduce: reduce = (context: reduceContext) => {}",
			"export let summarize: summarize = (summary: summarizeContext) => {}"
		],
	},
	"MapReduce NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsMapReduce",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType MapReduceScript",
			" */",
			"define([], function() {",
			"",
			"    function getInputData(){}",
			"",
			"    function map(context){}",
			"",
			"    function reduce(context){}",
			"",
			"    function summarize(summary){}",
			"",
			"    return {",
			"        getInputData,",
			"        map,",
			"        reduce,",
			"        summarize",
			"    }",
			"})",
			""
		]
	},
	"Suitelet NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsSuitelet",
		"body": [
			"/**",
			"*@NApiVersion 2.1",
			"*@NScriptType Suitelet",
			"*/",
			"",
			"import { EntryPoints } from 'N/types'",
			"import { debug, audit, error } from 'N/log'",
			"",
			"type onRequest = EntryPoints.Suitelet.onRequest",
			"type onRequestContext = EntryPoints.Suitelet.onRequestContext",
			"",
			"export let onRequest: onRequest = (context: onRequestContext) => {}"
		],
	},
	"Suitelet NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsSuitelet",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType Suitelet",
			" */",
			"define([], function() {",
			"",
			"    function onRequest(context){}",
			"",
			"    return {",
			"        onRequest",
			"    }",
			"})",
			""
		]
	},
	"RESTlet NetSuite - TypeScript": {
		"scope": "typescript",
		"prefix": "tsRestlet",
		"body": [
			"/**",
			"*@NApiVersion 2.1",
			"*@NScriptType Restlet",
			"*/",
			"",
			"import { EntryPoints } from 'N/types'",
			"import { debug, audit, error } from 'N/log'",
			"",
			"type get = EntryPoints.RESTlet.get",
			"type post = EntryPoints.RESTlet.post",
			"type put = EntryPoints.RESTlet.put",
			"type delete_ = EntryPoints.RESTlet.delete_",
			"",
			"export let get: get = (context: any) => {}",
			"export let post: post = (context: any) => {}",
			"export let put: put = (context: any) => {}",
			"export let delete_: delete_ = (context: any) => {}"
		],
	},
	"RESTlet NetSuite - JavaScript": {
		"scope": "javascript",
		"prefix": "nsRestlet",
		"body": [
			"/**",
			" *@NApiVersion 2.1",
			" *@NScriptType Restlet",
			" */",
			"define([], function() {",
			"",
			"    function _get(context){}",
			"",
			"    function _post(context){}",
			"",
			"    function _put(context){}",
			"",
			"    function _delete(context){}",
			"",
			"    return {",
			"        get: _get,",
			"        post: _post,",
			"        put: _put,",
			"        delete: _delete",
			"    }",
			"})",
			""
		]
	},
	"Custom Script with Deploy - XML": {
		"scope": "xml",
		"prefix": "nsCustomScript",
		"body": [
			"<clientscript scriptid=\"customscript_<NAME OF SCRIPT>\">",
			"  <description>DESCRIPTION OF SCRIPT</description>",
			"  <isinactive>F</isinactive>",
			"  <name>NAME OF SCRIPT</name>",
			"  <notifyadmins>F</notifyadmins>",
			"  <notifyemails>F</notifyemails>",
			"  <notifyowner>F</notifyowner>",
			"  <notifyuser>F</notifyuser>",
			"  <scriptfile>[/SuiteScripts/PATH_OF_SCRIPT]</scriptfile>",
			"  <scriptdeployments>",
			"    <scriptdeployment scriptid=\"customdeploy_<NAME OF DEPLOY>\">",
			"      <allemployees>F</allemployees>",
			"      <alllocalizationcontexts>T</alllocalizationcontexts>",
			"      <allpartners>F</allpartners>",
			"      <allroles>T</allroles>",
			"      <audslctrole></audslctrole>",
			"      <eventtype></eventtype>",
			"      <executioncontext>ACTION|ADVANCEDREVREC|BANKCONNECTIVITY|BANKSTATEMENTPARSER|BUNDLEINSTALLATION|CLIENT|CONSOLRATEADJUSTOR|CSVIMPORT|CUSTOMGLLINES|CUSTOMMASSUPDATE|DATASETBUILDER|DEBUGGER|EMAILCAPTURE|FICONNECTIVITY|FIPARSER|MAPREDUCE|OTHER|PAYMENTGATEWAY|PAYMENTPOSTBACK|PLATFORMEXTENSION|PORTLET|PROMOTIONS|RECORDACTION|RESTLET|RESTWEBSERVICES|SCHEDULED|SDFINSTALLATION|SHIPPINGPARTNERS|SUITELET|TAXCALCULATION|USEREVENT|USERINTERFACE|WEBSERVICES|WORKBOOKBUILDER|WORKFLOW</executioncontext>",
			"      <isdeployed>T</isdeployed>",
			"      <loglevel>DEBUG</loglevel>",
			"      <recordtype>[scriptid=<SAME SCRIPT ID>]</recordtype>",
			"      <status>RELEASED</status>",
			"    </scriptdeployment>",
			"  </scriptdeployments>",
			"</clientscript>"
		],
	}
}